--%comparator=tech.mlsql.it.IgnoreResultComparator
-- create test data
set jsonStr='''
{"features":[5.1,3.5,1.4,0.2],"label":0.0},
{"features":[5.1,3.5,1.4,0.2],"label":1.0}
{"features":[5.1,3.5,1.4,0.2],"label":0.0}
{"features":[4.4,2.9,1.4,0.2],"label":0.0}
{"features":[5.1,3.5,1.4,0.2],"label":1.0}
{"features":[5.1,3.5,1.4,0.2],"label":0.0}
{"features":[5.1,3.5,1.4,0.2],"label":0.0}
{"features":[4.7,3.2,1.3,0.2],"label":1.0}
{"features":[5.1,3.5,1.4,0.2],"label":0.0}
{"features":[5.1,3.5,1.4,0.2],"label":0.0}
''';
load jsonStr.`jsonStr` as data;
select vec_dense(features) as features , label as label from data
as data1;

train data1 as AutoML.`/tmp/auto_ml` where
algos="RandomForest,NaiveBayes,GBTClassifier"
and sortedBy='f1'
and keepVersion="true"
and evaluateTable="data1"
as model_result;

register AutoML.`/tmp/auto_ml` as autoML_predict;
register AutoML.`/tmp/auto_ml` as autoML_predict where algIndex="RandomForest.0";
register AutoML.`/tmp/auto_ml` as autoML_predict where autoSelectByMetric="f1";
select autoML_predict(features) as predict_label, label from data1 as output;

select name,value from model_result where name="status" as result;
-- make sure status of  all models are success.
!assert result ''':value=="success"'''  "all model status should be success";
